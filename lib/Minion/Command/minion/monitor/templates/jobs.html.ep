% layout 'basic';

%= stylesheet begin
  a.job-link { cursor: pointer };
% end

<div class="ui page grid">

  <div class="four wide column">
    <div class="ui vertical menu">
      % for my $state (qw/all active inactive finished failed/) {
        % my $filter = $state eq 'all' ? '' : $state;
        <a class="item func_set_filter" rv-class-active="jobs.filter.<%= $state %> < state" data-filter="<%= $filter %>">
          %= ucfirst $state
          <div class="ui label" rv-text="jobs.stats.<%= $state %>_jobs"></div>
        </a>
      % }
    </div>

    <div class="ui vertical menu">
      <a class="item func_refresh">
        <div class="ui two column grid">
          <div class="column">Refresh</div>
          <div class="right floated right aligned column">
            <div id="refresh" class="ui mini inline loader" rv-class-active="jobs.refreshing"></div>
          </div>
        </div>
      </a>
    </div>
  </div>

  <div class="twelve wide column">
    <table class="ui celled table">
      <thead><tr>
        % my @cols = qw/id task args state result priority retries/;
        % for my $col (@cols) {
          <th><%= $col %></th>
        % }
      </tr></thead>
      <tbody>
        <tr rv-each-job="jobs.list">
          % for my $col (@cols) {
            <td>
              % if ($col eq 'id') {
                <a class="job-link func_show_job" rv-api="job.url.api" rv-text="job.id"></a>
              % } elsif ($col eq 'args') {
                <pre>{ job.args | json }</pre>
              % } else {
                %= "{ job.$col }"
              % }
            </td>
          % }
        </tr>
      </tbody>
    </table>

    <div id="pagination" class="ui pagination menu">
      <a class="icon item func_page_left"><i class="left arrow icon"></i></a>
      <a class="item" rv-text="jobs.page"></a>
      <a class="icon item func_page_right"><i class="right arrow icon"></i></a>
    </div>
  </div>

</div>

<div class="ui modals hidden">
  <div id="job-modal" class="ui modal">
    <i class="close icon"></i>
    <div class="header">Job: { job.details.id }</div>
    <div class="content">
      <div class="ui raised segment">
        <label class="ui ribbon label">Definition</label>
        <p>Task: { job.details.task }</p>
        <p>Args: { job.details.args }</p>
        <p>Priority: { job.details.priority }</p>
        <p>Retries: { job.details.retries }</p>

        <label class="ui ribbon label">Status</label>
        <p>State: { job.details.state }</p>
        <p>Results: { job.details.results }</p>

        <label class="ui ribbon label">Timing</label>
        <p>Created: { job.details.created | date }</p>
        <p>Started: { job.details.started | date }</p>
        <p>Finished: { job.details.finished | date }</p>
      </div>
    </div>
    <div class="actions">
      <button class="ui red button func_remove_job">Remove</button>
      <button class="ui green button func_retry_job">Retry</button>
    </div>
  </div>
</div>

%= javascript begin
  (function() {
    'use strict';

    var page_limit = 100;
    var jobs = {
      list: [],
      filter: {
        state:    '',
        all:      function(){ return this.state === '' },
        active:   function(){ return this.state === 'active' },
        inactive: function(){ return this.state === 'inactive' },
        finished: function(){ return this.state === 'finished' },
        failed:   function(){ return this.state === 'failed' },
      },
      stats: {},
      refreshing: false,
      page: 1,
      pages: function(){
        var f = this.filter.state || 'all';
        var c = this.stats[f+'_jobs'];
        return Math.ceil(c / page_limit);
      }
    };

    rivets.bind($('tbody'),       {jobs: jobs});
    rivets.bind($('.menu'),       {jobs: jobs});
    rivets.bind($('#refresh'),    {jobs: jobs});
    rivets.bind($('#pagination'), {jobs: jobs});

    var job = {details: {}, url: ''};
    rivets.bind($('#job-modal'), {job: job});

    var refresh = function() {
      jobs.refreshing = true;

      var query = {
        limit:  page_limit,
        offset: page_limit * (jobs.page - 1),
      };

      if (jobs.filter.state) {
        query.state = jobs.filter.state
      }

      $.get("<%= url_for 'api_jobs' %>", query, function(data) {
        jobs.list = data;
        jobs.refreshing = false; //TODO time with stats call too.
      });

      $.get("<%= url_for 'api_stats' %>", function(data) {
        jobs.stats = data;
        jobs.stats.all_jobs = data.active_jobs + data.inactive_jobs + data.finished_jobs + data.failed_jobs;
      });
    };

    var set_filter = function(filter) {
      jobs.filter.state = filter;
      jobs.page = 1;
      refresh();
    };

    var show_job = function(link) {
      var url = $(link).attr('api');
      job.url = url;

      $.get(url, function(data) {
        job.details = data;
        $('#job-modal').modal('show');
      });
    };

    var modify_job = function(type) {
      var actions = {
        Retry: 'PATCH',
        Remove: 'DELETE',
      };

      $.ajax({
        url: job.url,
        type: actions[type],
        success: function(){ alert(type + ' successful'); refresh() },
      });
    };

    var move_page = function(dir) {
      if (dir === -1 && jobs.page === 1) { return }
      if (dir === 1  && jobs.page === jobs.pages()) { return }
      jobs.page = jobs.page + dir;
      refresh();
    };

    rivets.formatters.json = function(input) { return JSON.stringify(input) }

    $(function() {
      $('body').on('click', '.func_set_filter', function(evt) {
        evt.preventDefault();

        var filter = $(this).data('filter');
        set_filter(filter);
      });

      $('body').on('click', '.func_show_job', function(evt) {
        evt.preventDefault();

        show_job(this);
      });

      $('body').on('click', '.func_refresh', function(evt) {
        evt.preventDefault();

        refresh();
      });

      $('body').on('click', '.func_page_left', function(evt) {
        evt.preventDefault();

        move_page(-1);
      });

      $('body').on('click', '.func_page_right', function(evt) {
        evt.preventDefault();

        move_page(1);
      });

      $('body').on('click', '.func_remove_job', function(evt) {
        evt.preventDefault();

        modify_job('Remove');
      });

      $('body').on('click', '.func_retry_job', function(evt) {
        evt.preventDefault();

        modify_job('Retry');
      });

      refresh();
    });
  }());
% end
